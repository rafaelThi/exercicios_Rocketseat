class Todolist{
    constructor(){
        this.todos = [];
    }
    addTodo(){
    this.todos.push('Novo todo');
    console.log(this.todos);
    }
}
const minhalista = new Todolist();

document.getElementById('novotodo').onclick = function() {
    minhalista.addTodo();
}



var inputElement = document.querySelector('#app input');

class List{
    constructor(){
        this.data = [];
    }
    add(data){
        this.data.push(data);
        console.log(this.data);
    }
}
class Todolist extends List{
   constructor(){
       super();

       this.usuario = 'Rafael';
   }
   mostrausuario(){
       console.log(this.usuario);
   }
    }
var minhalista = new Todolist();

document.getElementById('novotodo').onclick = function() {
    minhalista.add(inputElement.value);
}
minhalista.mostrausuario();


var inputElement = document.querySelector('#app input');
var btmElement = document.querySelector('#app button');
class mat{
    static soma(a,b){
    return a+b;
}}
console.log(mat.soma(5,3));



const arr=[1,2,3,4,5,6,7];

const newarr=arr.map(function(item,index){
    return item+index;
    
});
console.log(newarr);

const sum = arr.reduce(function(total, next) {
    return total + next;

});

console.log(sum);

const filtro = arr.filter(function(item){
return item % 2 !== 0;
});
console.log(filtro);


const teste = ()=> {return{nome:'Rafael'}}
console.log(teste());

const filtro2 = arr.filter(function(item){
    return item % 2 === 0;
    });
    console.log(filtro2);

const achar= arr.find(function(item) {
return item === 10;
});

console.log(achar);



const soma = (a=3,b=6) => a+b;

console.log(soma(1));
console.log(soma());


function soma(a=3,b=6){
    return a+b;
}

console.log(soma(1));
console.log(soma());


const usuario = {nome: 'Rafael',idade: 23,ender:{cid:'São Paulo',ender2:{rua: {nom:'betari',},n: '123',},},};
function mostranome(usuario){
    console.log(usuario.nome,
        usuario.idade,
        usuario.ender.cid,
        usuario.ender.ender2.rua.nom,
        usuario.ender.ender2.n,);
}
mostranome(usuario);


const usuario = {nome: 'Rafael',idade: 23,ender:{cid:'São Paulo',ender2:{rua: {nom:'betari',},n: '123',},},};
function mostranome(usuario){
    console.log(usuario.nome,
        usuario.idade,
        usuario.ender.cid,
        usuario.ender.ender2.rua.nom,
        usuario.ender.ender2.n,);
}
mostranome(usuario);
 
const arr = [1,2,3,4];
const [a,b, ...c] = arr;

console.log(a);
console.log(b);
console.log(c);


function soma (a, b, ...parans){
    return parans;
}
console.log(soma(8,2,3,4,5,6,7,8));

//spred

const arr1 = [1,2,3];
const arr2 = [4,5,6];

const arr3 = [...arr1,...arr2];

console.log(arr3);

const user1 ={
    nome: 'rafael',
    idade: 23,
    cidade: 'SP',
}

const user2 ={...user1, nome:'Rafa'};

console.log(user2);
console.log(user1);


const nome = 'Rafael';
const idade = 23;

console.log(`Meu nome é ${nome} e tenho ${idade} anos!`)










const minhaPromisse = ()=> new Promise((resolve, reject)=>{
    setTimeout(()=> {resolve('ok')}, 2000);
});
async function executaPromisse(){
    console.log(await minhaPromisse());
    console.log(await minhaPromisse());
    console.log(await minhaPromisse());
}
executaPromisse();


const executaPromisse = async () => {
    console.log(await minhaPromisse());
    console.log(await minhaPromisse());
    console.log(await minhaPromisse());
};

executaPromisse();



import axios from 'axios';

class Api{

static async getUserFromGithub(user) {
  try{
   const response = await axios.get(`https://api.github.com/users/${user}`)
   console.log(response.data);
} catch (err){
    console.warn('Usuário não existe')
}
}
}
Api.getUserFromGithub('diego3g');
Api.getUserFromGithub('diego3g124123');


//(errado)
//const getUserFromGithub = () => new Promisse(resolve =>
   // axios.get(resolve));
   // async function getUserFromGithub (){
    //    try{
     //       const response = await axios.get(`https://api.github.com/users/${user}`)
       //     console.log(response.data);
     //   } catch (err){
    //        console.warn('Usuário não existe')
     //   }
    //    }
//(errado)




//(certo)
//function getUserFromGithub(user) {
 //axios.get(`https://api.github.com/users/${user}`)
 
 
 //.then(response => {
 //console.log(response.data);
 //})
 //.catch(err => {
 //console.log('Usuário não existe');
 //})
//}
//getUserFromGithub('diego3g');
//getUserFromGithub('diego3g124123');
//(certo)





/* /* import axios from 'axios';
async function getUserFromGithub(user) {
  try{
   const response = await axios.get(`https://api.github.com/users/${user}`)
   console.log(response.data);
} catch (err){
   console.warn('Usuário não existe')
}
}
getUserFromGithub('diego3g');
getUserFromGithub('diego3g124123');
 */

/*  import axios from 'axios';
class Github {
    static async getRepositories(repo) {
    try{
        const response = await axios.get(`https://api.github.com/repos/${repo}`)
        console.log(response.data);
}catch (err) {
    console.warn('Repositório não existe')
    }
}
}
Github.getRepositories('rocketseat/rocketseat.com.br');
Github.getRepositories('rocketseat/dslkvmskv');
 */
/* import axios from 'axios'
async function buscaUsuario (user) {
    try{
    const response = await axios.get(`https://api.github.com/users/${user}`)
    console.log(response.data);
    }catch(err) {
    console.log('Usuário não existe');
    };
}
   buscaUsuario('diego3g'); */
   
   
   
   
   
   
   class App{
constructor() {
    this.repositorio = [];

    this.formEl = document.getElementById('repo-form');
    this.listEl =document.getElementById('repo-list');
    this.registra();
}

registra() {
    this.formEl.onsubmit = event =>this.addrepo(event);
}
addrepo(event) {
event.preventDefault();

this.repositorio.push({
    name:'rocketseat.com.br',
    description:'Tire sua ideia do papel.',
    avatar_url:'https://avatars2.githubusercontent.com/u/2254731?v=4',
    html_url:'https://api.github.com/users/diego3g/repos',
});
    this.render();

}

render(){
    this.listEl.innerHTML = '';

    this.repositorio.forEach(repo =>{
        let imgEl = document.createElement('img');
        imgEl.setAttribute('src', repo.avatar_url);

        let titleEl = document.createElement('strong');
        titleEl.appendChild(document.createTextNode(repo.name));

        let descriptionEl = document.createElement('p');
        descriptionEl.appendChild(document.createTextNode(repo.description));

        let linkEl = document.createElement('a');
        linkEl.setAttribute('target', '_blank');
        linkEl.appendChild(document.createTextNode('Acessar'));

        let listitemEl= document.createElement('li');
        listitemEl.appendChild(imgEl);
        listitemEl.appendChild(titleEl);
        listitemEl.appendChild(descriptionEl);
        listitemEl.appendChild(linkEl);
        
        this.listEl.appendChild(listitemEl);
});

    }
}
const Meuapp = new App();

